#####only successful


def OptimalBST_success(p, n):
    E = [[0]*(n+1) for _ in range(n+1)]
    W = [[0]*(n+1) for _ in range(n+1)]
    R = [[0]*(n+1) for _ in range(n+1)]

    for i in range(n+1):
        E[i][i] = 0
        W[i][i] = 0

    for d in range(1, n+1):
        for i in range(n-d+1):
            j = i + d
            E[i][j] = float('inf')
            W[i][j] = W[i][j-1] + p[j-1]

            for r in range(i+1, j+1):
                cost = E[i][r-1] + E[r][j] + W[i][j]
                if cost < E[i][j]:
                    E[i][j] = cost
                    R[i][j] = r

    return E, W, R

n = 4
p = [0.1, 0.2, 0.4, 0.3]

E, W, R = OptimalBST_success(p, n)
print(f"Minimum expected cost: {E[0][n]:.4f}")

##### unsuceesful 

def OptimalBST(p, q, n):
    E = [[0]*(n+1) for _ in range(n+1)]
    W = [[0]*(n+1) for _ in range(n+1)]
    R = [[0]*(n+1) for _ in range(n+1)]

    for i in range(n+1):
        E[i][i] = q[i]
        W[i][i] = q[i]
       
    for d in range(1, n+1):
        for i in range(n-d+1):
            j = i + d
            E[i][j] = float('inf')
            W[i][j] = W[i][j-1] + p[j-1] + q[j]

            for r in range(i+1, j+1):
                cost = E[i][r-1] + E[r][j] + W[i][j]
                if cost < E[i][j]:
                    E[i][j] = cost
                    R[i][j] = r

    return E, W, R

n = 4
p = [0.1, 0.2, 0.4, 0.3]
q = [0.05, 0.1, 0.05, 0.05, 0.1]

E, W, R = OptimalBST(p, q, n)
print(f"Minimum expected cost: {E[0][n]:.4f}")
